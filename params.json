{
  "name": "WinForm Animation Library [.Net3.5+]",
  "tagline": "A simple library for animating controls/values in .Net WinForm (.Net 3.5 and later). Key frame (Path) based and fully customizable.",
  "body": "# <img src=\"https://github.com/falahati/WinFormAnimation/blob/master/WinFormAnimation/Icon.png?raw=true\" width=\"42\" alt=\"Icon\"> WinForm Animation Library [.Net3.5+]\r\nA simple library for animating controls/values in .Net WinForm (.Net 3.5 and later). Key frame (Path) based and fully customizable.\r\n\r\n*Please note that even though this library designed for WinForm but its usage is not limited to WinForm and can be used in other environments. Only reference of the library is to 'System.Drawing' name space.*\r\n\r\n### WHERE TO FIND\r\nThis library is available as a NuGet package at [nuget.org](https://www.nuget.org/packages/WinFormAnimation/).\r\n\r\n### MAIN CLASSES\r\n\r\n* `Float2D`: A class containing two `float` values as Vertical and Horizontal coordinates representing a point in a 2D plane\r\n* `Float3D`: A class containing three `float` values as Vertical, Horizontal and Depth coordinates representing a point in a 3D plane\r\n* `Path`: A class containing a `float` starting and a `float` ending point for an animation as well as duration and the function to control the animation.\r\n* `Path2D`: A class containing a `Float2D` starting and a `Float2D` ending point for an animation as well as duration and the function to control the animation.\r\n* `Path3D`: A class containing a `Float3D` starting and a `Float3D` ending point for an animation as well as duration and the function to control the animation.\r\n* `Animator`: A class for animating an array of `Path` objects. This class is one of the main classes and starting points of a basic animation.\r\n* `Animator2D`: A class for animating an array of `Path` objects. This class is one of the main classes and starting points of a basic animation.\r\n* `Animator2D`: A class for animating an array of `Path` objects. This class is one of the main classes and starting points of a basic animation.\r\n* `SafeInvoker`: A class holding a reference to a function to invoke in the correct thread, detected by a `Control` object passed to it. Useful for easier UI manipulations.\r\n* `SafeInvoker<T>`: Same as `SafeInvoker` class but with a generic argument for the function to invoke.\r\n\r\nFor full documentation of the classes and their members, please take a look at our doxygen page at [falahati.github.io](https://falahati.github.io/WinFormAnimation/doxygen).\r\n\r\n#### BASIC EXAMPLES\r\n##### ONE DIMENSIONAL ANIMATION OF A PROPERTY\r\nFollowing code animates a property named `Value` of a `ProgressBar` named `pb_progress` in 5 seconds from zero to one hundred:\r\n```C#\r\nnew Animator(new Path(0, 100, 5000))\r\n    .Play(pb_progress, Animator.KnownProperties.Value);\r\n```\r\n\r\n##### TWO DIMENSIONAL ANIMATION OF A PROPERTY\r\nFollowing code animates a `Form` in two paths. First one moves the `Form` from (0, -100) to (100, 200) and second path waits for 3 seconds and then moved the `Form` to its initial location in 2 seconds. (`this` is a `Form`)\r\n```C#\r\nnew Animator2D(\r\n        new Path2D(0, 100, -100, 200, 5000).ContinueTo(this.Location.ToFloat2D(), 2000, 3000))\r\n    .Play(this, Animator2D.KnownProperties.Location);\r\n```\r\n\r\n##### THREE DIMENSIONAL ANIMATION OF A PROPERTY\r\nFollowing code animates a property named `CustomColor` of a `Control` named `c_customLabel` in 2 seconds and after a delay of 1 second using the `AnimationFunctions.CubicEaseIn` function and with maximum of 10 frames per second.\r\n```C#\r\nnew Animator3D(\r\n        new Path3D(Color.Blue.ToFloat3D(), Color.Red.ToFloat3D(), 2000, 1000, AnimationFunctions.CubicEaseIn), \r\n        FPSLimiterKnownValues.LimitTen)\r\n    .Play(c_customLabel, \"CustomColor\");\r\n```\r\n\r\n\r\n##### KEYFRAMES\r\nThere are extension methods for `Path`, `Path2D`, `Path3D` and their arrays to let you continue the path easily and define the key frames as fast as possible. For example, following code moves a `Control` named `c_control` in a rectangular path infinitely:\r\n```C#\r\nnew Animator2D(\r\n    new Path2D(new Float2D(100, 100), new Float2D(200, 100), 1000)\r\n        .ContinueTo(new Float2D(200, 200), 1000)\r\n        .ContinueTo(new Float2D(100, 200), 1000)\r\n        .ContinueTo(new Float2D(100, 100), 1000))\r\n{\r\n    Repeat = true\r\n}.Play(c_control, Animator2D.KnownProperties.Location);\r\n```\r\n\r\n##### CALLBACKS\r\nIt is possible to define a custom callback as frame handler as well as defining a call back to handle the end of the animation. Following example will call a method named `CustomSetMethod` for setting new values and handle the frames, and starts the animation in reverse path after its end for one more time:\r\n\r\n```C#\r\nvar animator = new Animator(new Path(100, 200, 1000).ContinueTo(400, 500));\r\nanimator.Play(new SafeInvoker<float>(CustomSetMethod), new SafeInvoker(() =>\r\n{\r\n    animator.Paths = animator.Paths.Select(path => path.Reverse()).Reverse().ToArray();\r\n    animator.Play(new SafeInvoker<float>(CustomSetMethod));\r\n}));\r\n```\r\n\r\n#### DEMO PROJECT\r\nCheck the 'WinFormAnimation.Samples' project for simple usage examples.\r\n![Screenshot](https://github.com/falahati/WinFormAnimation/blob/master/screenshot.gif?raw=true \"Screenshot\")\r\n\r\n### LICENSE\r\nThe MIT License (MIT)\r\n\r\nCopyright (c) 2016 Soroush Falahati\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all\r\ncopies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\nSOFTWARE.",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}